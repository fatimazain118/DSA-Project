// Here we are using LL (having key-value pair) and hashMap (having key as string and value as address)
// Key is same is both

#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
     string key;
     int value;

     Node(string key, int value){
         this->key = key;
         this->value = value;
     }
};

// LRU Cache Data Structure

class LRUCache{
  public:
   int maxSize;
   list<Node> l;
   unordered_map<string, list<Node>:: iterator> m;      //address is the type iterator to a node in LL

   LRUCache(int maxSize){
       this->maxSize = maxSize > 1 ? maxSize : 1;         //min Size is set to 1
   }

   void insertKeyValue(string key, int value){
       //2. cases
       //1. key already present in the cache
       if(m.count(key)!=0){
           //replace the old value with the new value
           auto it = m[key];
           it->value = value;     
       }
       else{
           //2. key not present
           //check if cache is full or not
           //remove the least recently used item from cache
           if(l.size()==maxSize){
               Node last = l.back();
               m.erase(last.key);       //remove from Hashmap
               l.pop_back();            //remove from LL
           }

           Node n(key,value);           //make new node
           l.push_front(n);             // push in LL front
           m[key] = l.begin();          // also update in hashmap
       }
   }
   
   // To get value
   int* getValue(string key){
       //check if present in LL

       if(m.count(key)!=0){
           auto it = m[key];
           int value = it->value;

           l.push_front(*it);
           l.erase(it);
           m[key] = l.begin();        //update hash key
           return &l.begin()->value;
        }
        return NULL;
   }

   string mostRecentKey(){
       return l.front().key;
   }
};

int main(){
    LRUCache lru(3);
    lru.insertKeyValue("mango",10);
    lru.insertKeyValue("apple",20);
    lru.insertKeyValue("guava",30);
    cout<<lru.mostRecentKey()<<endl;

    lru.insertKeyValue("mango",40);
    cout<<lru.mostRecentKey()<<endl;
    
    /*
    int *order = lru.getValue("mango");
    if(order!=NULL){
        cout<<"Orders of mango is : "<<*order <<endl; 
    }
    */

    lru.insertKeyValue("banana",20);

    if(lru.getValue("apple")==NULL){
        cout<<"apple doesn't exist";
    }

    if(lru.getValue("guava")==NULL){
        cout<<"guava doesn't exist";
    }
    if(lru.getValue("mango")==NULL){
        cout<<"mango doesn't exist";
    }
    if(lru.getValue("banana")==NULL){
        cout<<"banana doesn't exist";
    }
  
  return 0;
}
_________________________________________
Output:
guava
guava
mango doesn't exist
